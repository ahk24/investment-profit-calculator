# Bilingual Investment vs. Savings Simulator: English / فارسی


def get_monthly_interest_rate(profit_percentage, profit_period):
    """
    Convert a nominal profit rate into an effective monthly rate.
    """
    rate = profit_percentage / 100
    p = profit_period.lower()
    if p == "annually":
        return (1 + rate)**(1/12) - 1
    elif p == "quarterly":
        return (1 + rate)**(1/3) - 1
    elif p == "monthly":
        return rate
    else:
        raise ValueError("Profit period must be 'monthly', 'quarterly', or 'annually'.")


def get_months_per(period):
    """
    Return how many months correspond to one period.
    """
    p = period.lower()
    if p == "monthly":
        return 1
    elif p == "quarterly":
        return 3
    elif p == "annually":
        return 12
    else:
        raise ValueError("Period must be 'monthly', 'quarterly', or 'annually'.")


def calculate_total_schedule(initial_amount, profit_percentage, profit_period, segments):
    """
    Simulate an investment with monthly compounding derived from profit_period,
    and piecewise contributions defined in `segments` list.
    Each segment is a dict with:
      - 'duration_units': length in profit_period units
      - 'amount': contribution amount each interval
      - 'period': contribution period ('monthly', 'quarterly', 'annually')
    Returns the final balance.
    """
    # Determine monthly parameters
    months_per_profit = get_months_per(profit_period)
    monthly_rate = get_monthly_interest_rate(profit_percentage, profit_period)

    # Build schedule with start/end months, amount, and interval
    schedule = []
    start_month = 1
    total_months = 0
    for seg in segments:
        seg_months = seg['duration_units'] * months_per_profit
        interval = get_months_per(seg['period'])
        schedule.append({
            'start': start_month,
            'end': start_month + seg_months - 1,
            'amount': seg['amount'],
            'interval': interval
        })
        start_month += seg_months
        total_months += seg_months

    # Simulate month-by-month
    balance = initial_amount
    for month in range(1, total_months + 1):
        # 1) Apply interest
        balance *= (1 + monthly_rate)
        # 2) Add contribution if due in the current segment
        for seg in schedule:
            if seg['start'] <= month <= seg['end']:
                if seg['amount'] > 0 and ((month - seg['start'] + 1) % seg['interval'] == 0):
                    balance += seg['amount']
                break
    return balance


# ——————————— Translations ———————————
translations = {
    'en': {
        'select_lang':      "Select language / زبان را انتخاب کنید [English/Persian]: ",
        'initial_amount':   "Initial amount",
        'profit_pct':       "Profit percentage (e.g. 10 for 10%)",
        'profit_period':    "Profit period",
        'period_opts':      "(monthly/quarterly/annually)",
        'period_monthly':   "monthly",
        'period_quarterly': "quarterly",
        'period_annually':  "annually",
        'add_segments':     "Enter segment durations (in number of {profit_period}s), comma-separated",
        'segment_amounts':  "Enter contribution amounts for each segment, comma-separated",
        'segment_periods':  "Enter contribution periods for each segment (comma-separated, use monthly/quarterly/annually)",
        'output_total':     "📈 Total after {total_months} months: {total:.2f} currency units",
        'output_saved':     "💰 Total if simply saved (no interest): {saved:.2f} currency units",
        'output_gain':      "📊 Gain from investing vs. saving: {gain:.2f} currency units",
    },
    'fa': {
        'select_lang':      "Select language / زبان را انتخاب کنید [English/Persian]: ",
        'initial_amount':   "مبلغ اولیه",
        'profit_pct':       "درصد سود (مثلاً ۱۰ برای ۱۰٪)",
        'profit_period':    "دوره سود",
        'period_opts':      "(ماهانه/سه‌ماهه/سالانه)",
        'period_monthly':   "ماهانه",
        'period_quarterly': "سه‌ماهه",
        'period_annually':  "سالانه",
        'add_segments':     "مدت‌های هر بخش را (تعداد {profit_period}) با کاما جدا وارد کنید",
        'segment_amounts':  "مبالغ هر بخش را با کاما جدا وارد کنید",
        'segment_periods':  "دوره‌های پرداخت برای هر بخش را با کاما جدا وارد کنید (ماهانه/سه‌ماهه/سالانه)",
        'output_total':     "📈 مجموع پس از {total_months} ماه: {total:.2f} واحد پولی",
        'output_saved':     "💰 مجموع اگر صرفاً پس‌انداز می‌شد (بدون سود): {saved:.2f} واحد پولی",
        'output_gain':      "📊 میزان افزایش از سرمایه‌گذاری نسبت به پس‌انداز: {gain:.2f} واحد پولی",
    }
}

# map user entry to internal keys
period_map = {
    'en': {'monthly': 'monthly', 'quarterly': 'quarterly', 'annually': 'annually'},
    'fa': {'ماهانه': 'monthly', 'سه‌ماهه': 'quarterly', 'سالانه': 'annually'}
}

# Prompt helper

def input_with_default(prompt, default, cast=str):
    line = input(f"{prompt} [default: {default}]: ").strip()
    return cast(line) if line else default

# ——————————— Language Selection ———————————
lang_raw = input(translations['en']['select_lang']).strip().lower()
lang = 'fa' if lang_raw in ('persian', 'fa', 'farsi', 'فارسی') else 'en'
t = translations[lang]

# ——————————— Gather Core Inputs ———————————
initial_amount    = input_with_default(t['initial_amount'], 0, float)
profit_percentage = input_with_default(t['profit_pct'], 10, float)

# Profit period selection
pp_in = input_with_default(f"{t['profit_period']} {t['period_opts']}", t['period_annually'])
profit_period     = period_map[lang].get(pp_in, pp_in)

# Segment definitions
# Durations in profit_period units, comma-separated
dur_str = input_with_default(
    t['add_segments'].format(profit_period=t['period_' + profit_period]),
    "1"
)
durations = [int(x.strip()) for x in dur_str.split(',')]

# Contribution amounts per segment
amt_str = input_with_default(t['segment_amounts'], "0")
amounts = [float(x.strip()) for x in amt_str.split(',')]
if len(amounts) == 1:
    amounts *= len(durations)
elif len(amounts) != len(durations):
    raise ValueError("Number of segment amounts must match number of durations.")

# Contribution periods per segment
per_str = input_with_default(f"{t['segment_periods']}", t['period_monthly'])
periods = [p.strip() for p in per_str.split(',')]
mapped_periods = [period_map[lang].get(p, p) for p in periods]
if len(mapped_periods) == 1:
    mapped_periods *= len(durations)
elif len(mapped_periods) != len(durations):
    raise ValueError("Number of segment periods must match number of durations.")

# Build segments list
nsegments = []
for du, am, pe in zip(durations, amounts, mapped_periods):
    nsegments.append({'duration_units': du, 'amount': am, 'period': pe})

# ——————————— Calculation & Results ———————————
# Compute final invested total
total = calculate_total_schedule(
    initial_amount,
    profit_percentage,
    profit_period,
    nsegments
)

# Compute saved-only total
months_per_profit = get_months_per(profit_period)
total_months = sum(durations) * months_per_profit
saved_contribs = 0
for seg in nsegments:
    seg_months = seg['duration_units'] * months_per_profit
    contribs = seg_months // get_months_per(seg['period'])
    saved_contribs += contribs * seg['amount']
saved_total = initial_amount + saved_contribs

gain = total - saved_total

# Outputs
print(t['output_total'].format(total_months=total_months, total=total))
print(t['output_saved'].format(saved=saved_total))
print(t['output_gain'].format(gain=gain))
